clear;
x1 = [-1 1 0;1 1 0]; 
x2 = [0;1];
t = linspace(-2,2,1000);
hold on;
plot(t,t.^2+1/2); 
scatter(x1(1,:),x1(2,:),'r');
scatter(x2(1,:),x2(2,:),'b');
hold off;

clear;
load('07HW2_digit.mat');
% soft-margin SVM classifiers with RBF kernels
ga = [2^(-14) 2^(-12) 2^(-10) 2^(-8) 2^(-6)];
c = [2^(-5) 2^(-3) 2^(-1) 2^1 2^3];
train = [train0;train1];
test = [test0;test1];
train=double(train)/256;
test=double(test)/256;
g = [zeros(500,1);ones(500,1)];
test_g = [zeros(100,1);ones(100,1)];

for i = 1:size(ga,2)
    for j = 1:size(c,2)
        options1 = ['-g ',num2str(ga(i)),' -c ',num2str(c(j))];
        model1 = svmtrain(g,train,options1);
        [pGROUP Accuracy p_val] = svmpredict(test_g,test,model1);
        Accuracy_RBF(i,j) = Accuracy(1,1);
    end
end

% find the best pair of gamma and c 
best_a=0;
for i=1:size(Accuracy_RBF,1)
    for j=1:size(Accuracy_RBF,2)
        if Accuracy_RBF (i,j)>best_a
            best_a=Accuracy_RBF (i,j);
            b_ga=log2(ga(i));
            b_c=log2(c(j));
        end
    end
end
fprintf('best gamma = 2^%s \nbest c = 2^%s',num2str(b_ga),num2str(b_c));

for i = 1:size(ga,2)
    for j = 1:size(c,2)
        % linear
        options2 = ['-t 0 -g ',num2str(ga(i)),' -c ',num2str(c(j))];
        model2 = svmtrain(g,train,options2);
        [pGROUP Accuracy2 p_val] = svmpredict(test_g,test,model2);
        Accuracy_l((i),(j)) = Accuracy2(1,1);
        % polynomial,p = 1
        options3 = ['-t 1 -d 1 -r 1 -g ',num2str(ga(i)),' -c ',num2str(c(j))];
        model3 = svmtrain(g,train,options3);
        [pGROUP Accuracy3 p_val] = svmpredict(test_g,test,model3);
        Accuracy_p1((i),(j)) = Accuracy3(1,1);
        % polynomial,p = 2
        options4 = ['-t 1 -d 2 -r 1 -g ',num2str(ga(i)),' -c ',num2str(c(j))];
        model4 = svmtrain(g,train,options4);
        [pGROUP Accuracy4 p_val] = svmpredict(test_g,test,model4);
        Accuracy_p2((i),(j))=Accuracy4(1,1);
        % polynomial,p = 3
        options5 = ['-t 1 -d 3 -r 1 -g ',num2str(ga(i)),' -c ',num2str(c(j))];
        model5 = svmtrain(g,train,options5);
        [pGROUP Accuracy5 p_val] = svmpredict(test_g,test,model5);
        Accuracy_p3((i),(j)) = Accuracy5(1,1);
    end
end

disp(Accuracy_l);
disp(Accuracy_p1);
disp(Accuracy_p2);
disp(Accuracy_p3);

ga = num2str(2^(-8)); 
c = num2str(2^3);
Accuracy_RBF = 0; 
Accuracy_l = 0; 
Accuracy_p1 = 0;
Accuracy_p2 = 0;
Accuracy_p3 = 0;
train_d = [train0;train1;train2;train3;train4;train5;train6;train7;train8;train9];
test_d = [test0;test1;test2;test3;test4;test5;test6;test7;test8;test9];
train_d = double(train_d)/256;
test_d = double(test_d)/256;
test_dg = [zeros(100,1);ones(100,1);ones(100,1)*2;ones(100,1)*3;ones(100,1)*4;ones(100,1)*5;ones(100,1)*6;ones(100,1)*7;ones(100,1)*8;ones(100,1)*9];
g = [zeros(500,1);ones(500,1);ones(500,1)*2;ones(500,1)*3;ones(500,1)*4;ones(500,1)*5;ones(500,1)*6;ones(500,1)*7;ones(500,1)*8;ones(500,1)*9];

% RBF
options1 = ['-g ',ga,' -c ',c];

% linear
options2 = ['-t 0 -g ',ga,' -c ',c];

% polynomial,p = 1
options3 = ['-t 1 -d 1 -r 1 -g ',ga,' -c ',c];

% polynomial,p = 2
options4 = ['-t 1 -d 2 -r 1 -g ',ga,' -c ',c];

% polynomial,p = 3
options5 = ['-t 1 -d 3 -r 1 -g ',ga,' -c ',c];

for i = 1:9
    for j = i:9
        train = [train_d((i-1)*500+1:i*500,:);train_d(j*500+1:(j+1)*500,:)];
        train_g = [g((i-1)*500+1:i*500);g(j*500+1:(j+1)*500)];
        test = [test_d((i-1)*100+1:i*100,:);test_d(j*100+1:(j+1)*100,:)];
        test_g = [test_dg((i-1)*100+1:i*100,:);test_dg(j*100+1:(j+1)*100,:)];
        
        % RBF
        model1 = svmtrain(train_g,train,options1);
        [pGROUP Accuracy p_val] = svmpredict(test_g,test,model1);
        A(i,j) = Accuracy(1,1);
        Accuracy_RBF = Accuracy_RBF + Accuracy(1,1)/45;
        % linear
        model2 = svmtrain(train_g,train,options2);
        [pGROUP Accuracy2 p_val] = svmpredict(test_g,test,model2);
        B(i,j) = Accuracy2(1,1);
        Accuracy_l = Accuracy_l + Accuracy2(1,1)/45;
        % polynomial,p = 1
        model3 = svmtrain(train_g,train,options3);
        [pGROUP Accuracy3 p_val] = svmpredict(test_g,test,model3);
        C(i,j) = Accuracy3(1,1);
        Accuracy_p1 = Accuracy_p1 + Accuracy3(1,1)/45;
        % polynomial,p = 2
        model4 = svmtrain(train_g,train,options4);
        [pGROUP Accuracy4 p_val] = svmpredict(test_g,test,model4);
        C(i,j) = Accuracy4(1,1);
        Accuracy_p2 = Accuracy_p2 + Accuracy4(1,1)/45;
        % polynomial,p = 3
        model5 = svmtrain(train_g,train,options5);
        [pGROUP Accuracy5 p_val] = svmpredict(test_g,test,model5);
        C(i,j) = Accuracy5(1,1);
        Accuracy_p3 = Accuracy_p3 + Accuracy5(1,1)/45;
    end
end

fprintf('Accuracy of RBF kernal = %s％\nAccuracy of linear kernal = %s％ \nAccuracy of polynomial kernal(degree=1)= %s％\nAccuracy of polynomial kernal(degree=2) = %s％\nAccuracy of polynomial kernal(degree=3)= %s％',num2str(Accuracy_RBF),num2str(Accuracy_l),num2str(Accuracy_p1),num2str(Accuracy_p2),num2str(Accuracy_p3));